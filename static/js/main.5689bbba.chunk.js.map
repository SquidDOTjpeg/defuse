{"version":3,"sources":["components/TimeDisplay.js","components/Button.js","components/BombTimer.js","components/DefuseTimer.js","pages/Defuse.js","pages/Landing.js","App.js","reportWebVitals.js","index.js"],"names":["TimeDisplay","time","require","useState","useEffect","useRef","Button","holdTime","buttonText","callBack","setTime","hold","setHold","timer","stopTimer","clearInterval","current","setInterval","prevState","toFixed","parseFloat","onMouseDown","onMouseUp","BombTimer","bombTime","buttonCallBack","defuserSet","newBombTime","setNewBombTime","DefuseTimer","defuseTime","defuserDestroyed","newDefuseTime","setnewDefuseTime","console","log","Defuse","form","renderDefuser","setRenderDefuser","roundTime","Landing","change","submit","pForm","className","onSubmit","htmlFor","value","name","type","onChange","delay","App","setForm","renderGame","setRenderGame","e","target","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAQeA,MARf,YAA+B,IAARC,EAAO,EAAPA,KACnB,OACI,8BACI,6BAAKA,OCDjB,EAAwCC,EAAQ,GAAxCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,OAgDdC,MA9Cf,YAAqD,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,SACpC,EAAwBN,EAASI,GAAjC,mBAAON,EAAP,KAAaS,EAAb,KACA,EAAwBP,GAAS,GAAjC,mBAAOQ,EAAP,KAAaC,EAAb,KACMC,EAAQR,EAAO,MAoBrB,SAASS,EAAUD,GACfE,cAAcF,GASlB,OA1BAT,GAAU,WAEFO,EAEAE,EAAMG,QAAUC,aAAY,WACxBP,GAAQ,SAAAQ,GAAS,OAAKA,EAAY,IAAIC,QAAQ,QAE5C,KAGNL,EAAUD,EAAMG,WAGrB,CAACL,IAQqB,IAArBS,WAAWnB,KACXQ,IACAK,EAAUD,EAAMG,UAIhB,qCACI,8BACI,wBAAQK,YAAa,WACjBT,GAAQ,IACTU,UAAW,WACVV,GAAQ,IAHZ,SAIIJ,MAER,cAAC,EAAD,CAAaP,KAAMA,QCbhBsB,MA7Bf,YAA8D,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WAC3C,EAAsCvB,mBAASqB,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACMf,EAAQR,iBAAO,MAUrB,OATAD,qBAAU,WAKN,OAJAS,EAAMG,QAAUC,aAAY,WACxBW,GAAe,SAAAV,GAAS,OAAKA,EAAY,OAC1C,KAEI,OAER,IAEAQ,GAKiB,IAAhBC,GAJAZ,cAAcF,EAAMG,SACb,MAQP,gCACI,cAAC,EAAD,CAAaf,KAAM0B,IACnB,cAAC,EAAD,CAAQpB,SAAU,EAAGC,WAAW,gBAAgBC,SAAUgB,QCIvDI,MA5Bf,YAAwE,IAAjDC,EAAgD,EAAhDA,WAAYL,EAAoC,EAApCA,eAAgBM,EAAoB,EAApBA,iBAC/C,EAA0C5B,mBAAS2B,GAAnD,mBAAOE,EAAP,KAAsBC,EAAtB,KACMpB,EAAQR,iBAAO,MASrB,OARAD,qBAAU,WACN8B,QAAQC,IAAIL,GACZjB,EAAMG,QAAUC,aAAY,WACxBgB,GAAiB,SAAAf,GAAS,OAAKA,EAAY,OAC5C,OAEJ,IAEAa,GAKmB,IAAlBC,GAJAjB,cAAcF,EAAMG,SACb,MAQP,gCACI,cAAC,EAAD,CAAaf,KAAM+B,IACnB,cAAC,EAAD,CAAQzB,SAAU,EAAGC,WAAW,kBAAkBC,SAAUgB,QCIzDW,MA3Bf,YAA2B,IAATC,EAAQ,EAARA,KACd,EAA0ClC,oBAAS,GAAnD,mBAAOmC,EAAP,KAAsBC,EAAtB,KACA,EAAgDpC,oBAAS,GAAzD,mBAAO4B,EAAP,KAgBA,OAhBA,KAiBI,sCACMO,GAAiB,cAAC,EAAD,CAAWd,SAAUa,EAAKG,UAAWf,eAXhE,WAKIc,GAAiB,MAOZD,GAAiB,cAAC,EAAD,CAAaR,WAAYO,EAAKP,WAAYL,eAhBpE,WACIS,QAAQC,IAAI,WAe4EJ,iBAAkBA,QCDnGU,MAxBf,YAA2C,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,MAC9B,OACI,qBAAKC,UAAU,MAAf,SACI,wBAAQA,UAAU,aAAlB,SACI,uBAAMC,SAAUH,EAAhB,UACI,gCACI,uBAAOI,QAAQ,YAAf,wBACA,uBAAOC,MAAOJ,EAAMJ,WAAa,GAAIS,KAAK,YAAYC,KAAK,OAAOC,SAAUT,OAEhF,gCACI,uBAAOK,QAAQ,QAAf,mBACA,uBAAOC,MAAOJ,EAAMQ,OAAS,GAAIH,KAAK,QAAQC,KAAK,OAAOC,SAAUT,OAExE,gCACI,uBAAOK,QAAQ,aAAf,yBACA,uBAAOC,MAAOJ,EAAMd,YAAc,GAAImB,KAAK,aAAaC,KAAK,OAAOC,SAAUT,OAElF,wBAAQQ,KAAK,SAAb,4BC4BLG,MAtCf,WACE,MAAwBlD,mBAAS,IAAjC,mBAAOkC,EAAP,KAAaiB,EAAb,KACA,EAAoCnD,oBAAS,GAA7C,mBAAOoD,EAAP,KAAmBC,EAAnB,KACA,EAA0CrD,oBAAS,GAAnD,mBACA,GADA,UACgDA,oBAAS,IAAzD,mBAwBA,OAxBA,UAyBE,qBAAK0C,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,WACIU,GAAc,cAAC,EAAD,CAASb,OAzB/B,SAAqBe,GACnB,MAAwBA,EAAEC,OAAlBT,EAAR,EAAQA,KAAMD,EAAd,EAAcA,MACdM,EAAQ,2BAAKjB,GAAN,kBAAaY,EAAOD,MAuBuBL,OApBpD,SAAsBc,GACpBA,EAAEE,iBACFH,GAAc,IAkB0DZ,MAAOP,IAC1EkB,GAAc,cAAC,EAAD,CAAQlB,KAAMA,UC3BtBuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5689bbba.chunk.js","sourcesContent":["function TimeDisplay({ time }){\r\n    return(\r\n        <div>\r\n            <h1>{time}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimeDisplay","import TimeDisplay from \"./TimeDisplay\"\r\n\r\nconst { useState, useEffect, useRef } = require(\"react\")\r\n\r\nfunction Button({ holdTime, buttonText, callBack }) {\r\n    const [time, setTime] = useState(holdTime)\r\n    const [hold, setHold] = useState(false)\r\n    const timer = useRef(null)\r\n\r\n\r\n    //Reruns code after component mounts then after everytime holo changes state\r\n    useEffect(() => {\r\n        \r\n        if (hold) {\r\n            //Sets a ref to setInterval so it can be accessed anywhere in the code\r\n            timer.current = setInterval(() => {\r\n                setTime(prevState => (prevState - .1).toFixed(1))\r\n            }\r\n                , 100)\r\n            //Stops the interval if hold !== true\r\n        } else {\r\n            stopTimer(timer.current)\r\n        }\r\n        //States condition for rerunning code\r\n    }, [hold])\r\n\r\n    //Function to stop a timer which takes a param of said timer\r\n    function stopTimer(timer) {\r\n        clearInterval(timer)\r\n    }\r\n\r\n    //Logic to determine if the component gets rendered or not. Stops the timer if not\r\n    if (parseFloat(time) === 0) {\r\n        callBack()\r\n        stopTimer(timer.current)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <button onMouseDown={() => {\r\n                    setHold(true)\r\n                }} onMouseUp={() => {\r\n                    setHold(false)\r\n                }}>{buttonText}</button>\r\n            </div>\r\n            <TimeDisplay time={time}></TimeDisplay>\r\n        </>\r\n    )\r\n}\r\nexport default Button","import { useEffect, useState, useRef } from \"react\";\r\nimport TimeDisplay from \"./TimeDisplay\";\r\nimport Button from \"./Button\";\r\n\r\nfunction BombTimer({ bombTime, buttonCallBack, defuserSet }) {\r\n    const [newBombTime, setNewBombTime] = useState(bombTime)\r\n    const timer = useRef(null)\r\n    useEffect(() => {\r\n        timer.current = setInterval(() => {\r\n            setNewBombTime(prevState => (prevState - 1))\r\n        }, 1000)\r\n\r\n        return null\r\n\r\n    }, [])\r\n\r\n    if(defuserSet){\r\n        clearInterval(timer.current)\r\n        return null\r\n    }\r\n\r\n    if (newBombTime === 0) {\r\n        clearInterval(timer.current)\r\n        return null\r\n    }\r\n    return (\r\n        <div>\r\n            <TimeDisplay time={newBombTime} />\r\n            <Button holdTime={4} buttonText=\"Start Defuser\" callBack={buttonCallBack}></Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BombTimer","import { useEffect, useState, useRef } from \"react\";\r\nimport TimeDisplay from \"./TimeDisplay\"\r\nimport Button from \"./Button\"\r\n\r\nfunction DefuseTimer({ defuseTime, buttonCallBack, defuserDestroyed }) {\r\n    const [newDefuseTime, setnewDefuseTime] = useState(defuseTime)\r\n    const timer = useRef(null)\r\n    useEffect(() => {\r\n        console.log(defuseTime);\r\n        timer.current = setInterval(() => {\r\n            setnewDefuseTime(prevState => (prevState - 1))\r\n        }, 1000)\r\n\r\n    }, [])\r\n\r\n    if(defuserDestroyed){\r\n        clearInterval(timer.current)\r\n        return null\r\n    }\r\n\r\n    if (newDefuseTime === 0) {\r\n        clearInterval(timer.current)\r\n        return null\r\n    }\r\n    return (\r\n        <div>\r\n            <TimeDisplay time={newDefuseTime} />\r\n            <Button holdTime={7} buttonText=\"Destroy Defuser\" callBack={buttonCallBack}></Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DefuseTimer","import { useState } from 'react';\r\nimport BombTimer from '../components/BombTimer';\r\nimport DefuseTimer from '../components/DefuseTimer';\r\n\r\nfunction Defuse({ form }) {\r\n    const [renderDefuser, setRenderDefuser] = useState(false)\r\n    const [defuserDestroyed, setDefuserDestroyed] = useState(false)\r\n\r\n\r\n    function proxy2() {\r\n        console.log(\"proxy2\")\r\n    }\r\n\r\n    function proxy() {\r\n        defuserSet()\r\n    }\r\n\r\n    function defuserSet() {\r\n        setRenderDefuser(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {!renderDefuser && <BombTimer bombTime={form.roundTime} buttonCallBack={proxy} />}\r\n            {renderDefuser && <DefuseTimer defuseTime={form.defuseTime} buttonCallBack={proxy2} defuserDestroyed={defuserDestroyed} />}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Defuse","function Landing({change, submit, pForm}) {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <form onSubmit={submit}>\r\n                    <div>\r\n                        <label htmlFor=\"roundTime\">Round Time</label>\r\n                        <input value={pForm.roundTime || \"\"} name=\"roundTime\" type=\"text\" onChange={change}></input>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"delay\">Delay</label>\r\n                        <input value={pForm.delay || \"\"} name=\"delay\" type=\"text\" onChange={change}></input>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"defuseTime\">Defuse Time</label>\r\n                        <input value={pForm.defuseTime || \"\"} name=\"defuseTime\" type=\"text\" onChange={change}></input>\r\n                    </div>\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            </header>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Landing","import { useState } from 'react';\nimport './App.css';\nimport Defuse from \"./pages/Defuse\"\nimport BombTimer from './components/BombTimer';\nimport DefuseTimer from './components/DefuseTimer';\nimport Landing from './pages/Landing';\n\nfunction App() {\n  const [form, setForm] = useState({})\n  const [renderGame, setRenderGame] = useState(false)\n  const [renderDefuser, setRenderDefuser] = useState(false)\n  const [defuserDestroyed, setDefuserDestroyed] = useState(false)\n\n  function handleInput(e) {\n    const { name, value } = e.target\n    setForm({ ...form, [name]: value })\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    setRenderGame(true)\n  }\n\n  function proxy2() {\n    console.log(\"proxy2\")\n  }\n\n  function proxy() {\n    defuserSet()\n  }\n\n  function defuserSet() {\n    setRenderDefuser(true)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {!renderGame && <Landing change={handleInput} submit={handleSubmit} pForm={form}></Landing>}\n        {renderGame && <Defuse form={form}/>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}